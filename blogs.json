{"status":"ok","feed":{"url":"https://medium.com/feed/@nikitrauniyar","title":"Stories by Nikit Rauniyar on Medium","link":"https://medium.com/@nikitrauniyar?source=rss-763a5744350b------2","author":"","description":"Stories by Nikit Rauniyar on Medium","image":"https://cdn-images-1.medium.com/fit/c/150/150/1*couw5n4P5kIMEfYJBc8JmA.jpeg"},"items":[{"title":"Applications of Blockchain in the Real World","pubDate":"2023-01-29 07:53:14","link":"https://nikitrauniyar.medium.com/applications-of-blockchain-in-the-real-world-73c2be3982da?source=rss-763a5744350b------2","guid":"https://medium.com/p/73c2be3982da","author":"Nikit Rauniyar","thumbnail":"https://cdn-images-1.medium.com/max/1024/1*v4I53PhRd5YysBX1wsXpnQ.jpeg","description":"\n<p>A comprehensive discussion on the characteristics of Blockchain, its applications, and its\u00a0future.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*v4I53PhRd5YysBX1wsXpnQ.jpeg\"><figcaption>Image by motoviurii on\u00a0Freepik</figcaption></figure><h3>Introduction</h3>\n<p>Blockchain technology was first applied in 2008 in an attempt to make peer-to-peer transactions which resulted in the development of Bitcoin. Bitcoin is a just subset of Blockchain Technology. Blockchain is a new special type of database that holds data in the form of blocks and the blocks of data are chained together. This makes blockchain somewhat different from normal database technologies.</p>\n<p>Blockchain is maintained by distributed ledger technology\u200a\u2014\u200athe chain is maintained by a network of computers (nodes), thus making it decentralised. The more nodes are in the blockchain network, the more decentralised, transparent, and secure it is. Each node in a network gets a copy of the ledger which is updated continuously when a new block is added. Blockchain can be made public meaning every member can see the transactions. However, private blockchains also exist in which a single entity controls the network. But the real application of blockchain is achieved through public blockchains.</p>\n<h3>Characteristics of Blockchain</h3>\n<p>There exists a separate debate about whether Blockchain is a database or not. However, it can be classified as a special-purpose database having specific characteristics and features differing from typical databases. Some characteristics would\u00a0be:</p>\n<h4>Data Storage Structure</h4>\n<p>The storage structure of data is the main difference between a blockchain and a normal database. Data are stored in encrypted form inside the block. Each block has key attributes: hash\u200a\u2014\u200awhich uniquely identifies the block, data to be stored in encrypted form, previous block\u2019s hash to chain them together, and metadata (block number and timestamp). If any attempt to alter the data of a blockchain is done, then that would change the hash of the block. And if the hash of one block changes, the hash of the next block is also changed and the hash of every block in the chain will be changed. Eventually, this will destroy the entire blockchain. Thus, the transactions in a blockchain are permanent and irreversible. These types of attempts to tamper with data are not verified by the computers in the network making the stored data\u00a0secure.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1001/1*eyGBp-brSGJO8HfOHEDRAg.png\"></figure><h4>Transaction Process</h4>\n<p>Public Blockchains are decentralised, and the transactions/data are recorded based on a consensus (common agreement) algorithm. Whenever a transaction or a group of transactions is requested, an immediate block representing those transactions is created. Then, the block is verified by nodes using a complex mathematical algorithm, and after verification, the block is added to the main chain, and the change is broadcasted to all the nodes to update the ledger. After the update, the transaction is classified as complete and stored permanently on the blockchain.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*5tJrxBHBGxi-bRk3_NbKRg.jpeg\"></figure><h4>Cryptocurrency Attributes</h4>\n<p>Cryptocurrency is a new type of virtual currency that only exists in code, is secured by cryptography, and functions outside of government systems. Blockchain and cryptocurrency often come together and are sometimes used interchangeably because all the cryptocurrencies use public Blockchain using consensus algorithm to verify payment transactions. But cryptocurrencies are just one of the matured applications of Blockchain and there is more in the Blockchain field. Cryptocurrencies and blockchains have some attributes which make this technology revolutionary.</p>\n<ul>\n<li>No Central Authority: Traditional currencies like US$, and AU$ are controlled by the government and they can manipulate the currency supply to increase or decrease their value. Since cryptocurrency blockchain is decentralised over computers around the world, it cannot be manipulated. Instead, it gives power to people making it a decentralised currency out of the control of a single\u00a0entity.</li>\n<li>Irreversible and Immutable: Completed transactions cannot be reversed back in cryptocurrency as it is permanent. This makes blockchain technology secure.</li>\n<li>Anonymity: Cryptocurrency works with public-key and private-key systems. It is impossible to create a transaction unless a private key is known. Any transaction sent to an address is public. This makes transactions anonymous.</li>\n<li>Supply and Demand: Cryptocurrency supply is pre-fixed and written in code. Any manipulations over the network have to achieve through 51% votes of nodes or some special criteria set out before the launch which is a way of giving freedom to\u00a0people.</li>\n</ul>\n<h4>Decentralisation</h4>\n<p>Private blockchains do exist in which several computers run blockchain networks inside the control of one entity. However, the true potential of blockchain is achieved through public blockchain that is decentralised all over the world and run by computers owned by different individuals and entities. Every node in the network has the record of the public ledger, if one node tries to tamper with the data, then all nodes come together and give their record as a reference to point out that the one who is trying to tamper with the data is wrong. The cross-reference mechanism of blockchain technology is achieved through decentralisation and is equally important to maintain security.</p>\n<h4>Transparency</h4>\n<p>Public Blockchain has to be transparent. Each transaction can be viewed by nodes or blockchain explorers. Anyone with computing powers can be a node to support the network, this feature makes blockchain transparent. Every transaction is live and traceable. However, since it works in public-key and private-key cryptographic systems, privacy is maintained equally. In other words, transactions are public and traceable but irreversible and can be made entirely anonymous depending upon the requirements<em>.</em></p>\n<h4>Blockchain Security</h4>\n<p>Blockchain Technology fulfils the security issues very well. It gets more secure and difficult to hack over time. The blocks are added to the chain chronologically. The hash is created with a complex math function resulting in random strings and numbers. Given a hacker wants to hack the blockchain network: the hacker alters its copy of records, and it would not match with the other many copies in the network. The only copy that does not match with the majority of copies over the network and hence it is rejected. Trust in the system is maintained by a peer-to-peer approach than central entities like banks. To completely hack the network, the hacker would have to tamper with 51% of copies of all networks simultaneously. This is next to impossible as it requires heavy computing powers, money, and resources as it has to change the hash of every block after the block it attacks. This would be a pointless attack. That is why the security is directly proportional to the time and number of blocks added in the\u00a0future.</p>\n<h3>Real-World Blockchain Applications</h3>\n<p>Blockchain has evolved, and it can be applied in many sectors. Major applications are:</p>\n<h4>Banking and\u00a0Finance</h4>\n<p>The most useful and mature application of Blockchain is in the sector of Banking and Finance. Cryptocurrency blockchain makes money transfers and transactions more efficient than current banking systems. Payment takes 2 days sometimes to appear and banks can operate only during business hours. There exist many Decentralised Finance (DeFi) projects working to automate financial services without the traditional concepts of Banks as the central authority. Integrating blockchain technology into banking can increase the transaction speed to as maximum as 10 minutes. Also, the stock exchanges take 2 days to settle shares. The use of blockchain to settle shares would remove the need to freeze the shares for 2 days to a maximum of 10 minutes. Apart, cryptocurrency has special advantages which are promising enough to replace the need to use traditional banking systems including for cross-border transactions.</p>\n<h4>Healthcare</h4>\n<p>Whenever any medical report is generated and finalised, it can be encrypted and stored in a blockchain. This will ensure the patient that their medical record cannot be changed and can be securely accessed using their private key. They may also be able to share that report only if they want to do so, no external entity could violate their privacy. This will generate a sense of confidence in patients for their healthcare providers<em>.</em></p>\n<h4>Smart Contracts</h4>\n<p>Smart Contracts is simply a contract made by using a piece of code that runs on top of a blockchain. Everyday works require some sort of contract and transactions using blockchain are permanent and irreversible. This could raise concern if anyone pays for something and does not get what he/she is supposed to. That is where smart contracts are handy. Say a tenant needs a house to lease and the landlord would give the keys (door code) of the house when he receives a security bond. Using a smart contract would require both parties to send some portions to generate a contract using a smart contract and they are held. The contract would automatically execute if the pre-defined conditions by both parties are met. The smart contract would refund the bond of the tenant given that the landlord does not provide keys (door code) before the lease date. This technology removes the need for third-party to verify contracts instead it is done through codes that are verified by\u00a0nodes.</p>\n<h4>Real Estate</h4>\n<p>Real estate deals involve lots of intermediaries and paper-works. Currently, real estate deals are time-consuming and cumbersome. There also exist many property claims and disputes. The current system is prone to errors and involves inaccuracy. Implementing blockchain in real estate would cut lots of intermediaries as transactions with smart contracts would increase the efficiency in completing deals. Further, owners can also fully trust that their ownership is permanently registered. This would also solve illegal disputes and claims. This application would be fruitful in low-income countries where government infrastructure is not fully developed.</p>\n<h4>Supply Chains</h4>\n<p>Global trades have been prominent, and we have complex supply chains. Blockchain can be applied to supply chains. The origin of foods, materials, and expiry dates can be recorded in a blockchain. This would allow tracking of the safety and path of the foods/materials. Several companies have tried and tested implementing blockchain in supply chains. Walmart tested a pilot project in which it traced pork in China which was produced in the US to check the accuracy and efficiency of the blockchain. UK-based company Provenance raised U$800,000 to implement blockchain to trace food (after pilot-testing Tuna). This indicates Supply Chain Management is adopting blockchain.</p>\n<h4>Digital IDs and\u00a0Voting</h4>\n<p>The recent US election was blamed for being rigged. Similar problems can be seen around the world in an election. Election facilitated by blockchain will be transparent, and confidential, with live counting. This would cut so many processes, personnel, and time. This removes the need for recounts and gives instant results. An election using blockchain has already been tested in 2018 in West Virginia, USA<em>.</em><strong><em> </em></strong>Similarly, cross-border identification is still a problem for many migrants. People travel and migrate around the world but sometimes they have a problem with the authentication of their identity. Blockchain can be used to maintain the digital IDs of civilians and since it will be a permanent record, it will be easier to claim identity anywhere around the world<em>.</em> Many companies steal and sell the users\u2019 data to profit using their central database systems. However, by using blockchain, the identity will be encoded and only accessible with a private key for the user, so blockchain maintains transparency and confidentiality at the same\u00a0time.</p>\n<h3>Pros and Cons of Blockchain</h3>\n<p>Blockchain technology seems promising in many sectors and is already changing the world by applying its technology to cryptocurrency. However, there are still some disadvantages to the blockchain.</p>\n<h4>Pros:</h4>\n<ul>\n<li>Accuracy improvement in record-keeping as it removes human involvement.</li>\n<li>Financially efficient as it removes the need for third-party in any\u00a0sector.</li>\n<li>Can be decentralised which makes it more permanent, secure, and harder to alter\u00a0data.</li>\n<li>Any transactions over the network are confidential, secure, transparent, and efficient.</li>\n<li>Underdeveloped and developing countries can use it to store civilian information cheaply.</li>\n</ul>\n<h4>Cons:</h4>\n<ul>\n<li>Because of its decentralised nature, it can bypass any government restrictions or regulations.</li>\n<li>Criminals use blockchain/cryptocurrency to fund illegal activities maintaining their anonymity.</li>\n<li>If a hacker can get control over 51% of nodes simultaneously then it can be\u00a0hacked.</li>\n<li>If any bug is found in a blockchain network, then it can destroy the whole\u00a0network.</li>\n<li>Anyone can build their network and to support the network it opens some coins/tokens to give rewards to nodes who validate the network. Because of this, many use this technique to scam investors\u2019 money.</li>\n</ul>\n<h3>Blockchain\u2019s Future / My\u00a0Views</h3>\n<p>Blockchain is fairly a new technology that was applied practically just over a decade ago. Many argue it is \u201cInternet 2.0\u201d. This technology has the power to decentralise anything taking the power from central authority be it Governments or Big Banks and transferring it to the general\u00a0people.</p>\n<p>Cryptocurrency projects have proved that blockchain technology can be applied on a high scale. With more years, it is being applied to many sectors. I suppose it will be also applied to record results published on some high-level exams given that it will be permanent and impossible to tamper with. I think the next major application will be in election voting. In years to come, I think we can see some regulatory bodies and governments stepping in to try to regulate this technology given it has some enormous power. Some countries like China and the US are discussing making their national digital currency based on blockchain removing traditional paper currency. Peer-to-peer nature will make money transfer cross-countries with low fees, time, and freedom. Blockchain real and high-scale applications are still not done except in the cryptocurrency industry. Critics question the application of blockchain in many industries, but the relevance of blockchain in the financial world is far from over and it is here to stay. I strongly think even if in the worst-case scenario, we may not be able to apply blockchain in other businesses/industries but applications in the financial world with cryptocurrency may remain\u00a0popular.</p>\n<h3>Conclusion</h3>\n<p>In simple words, Blockchain is a ledger that is distributed over a large network of computers holding similar information in a cell called blocks. All the information is shared between the network and trust for any type of transaction is generated with a consensus mechanism where some computers have to compete to solve complex mathematical equations (proof-of-work) to be able to add blocks in the permanent chain. If some nodes try to change the block\u2019s data, it has to perform some work (proof-of-work) to change the block\u2019s hash and since all blocks are connected to a chain with the hash reference, it has to perform some work on all chains which is generally denied by other\u00a0nodes.</p>\n<p>Blockchain is revolutionary and promising technology set to change the way of deals, and transactions without the need for third-party intermediaries or central authority. Time and again government and big banks have misused their power because the modern financial world is controlled solely by them. Blockchain/Bitcoin was the first to prove that peer-to-peer transactions are possible without the needs of\u00a0banks.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=73c2be3982da\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<p>A comprehensive discussion on the characteristics of Blockchain, its applications, and its\u00a0future.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*v4I53PhRd5YysBX1wsXpnQ.jpeg\"><figcaption>Image by motoviurii on\u00a0Freepik</figcaption></figure><h3>Introduction</h3>\n<p>Blockchain technology was first applied in 2008 in an attempt to make peer-to-peer transactions which resulted in the development of Bitcoin. Bitcoin is a just subset of Blockchain Technology. Blockchain is a new special type of database that holds data in the form of blocks and the blocks of data are chained together. This makes blockchain somewhat different from normal database technologies.</p>\n<p>Blockchain is maintained by distributed ledger technology\u200a\u2014\u200athe chain is maintained by a network of computers (nodes), thus making it decentralised. The more nodes are in the blockchain network, the more decentralised, transparent, and secure it is. Each node in a network gets a copy of the ledger which is updated continuously when a new block is added. Blockchain can be made public meaning every member can see the transactions. However, private blockchains also exist in which a single entity controls the network. But the real application of blockchain is achieved through public blockchains.</p>\n<h3>Characteristics of Blockchain</h3>\n<p>There exists a separate debate about whether Blockchain is a database or not. However, it can be classified as a special-purpose database having specific characteristics and features differing from typical databases. Some characteristics would\u00a0be:</p>\n<h4>Data Storage Structure</h4>\n<p>The storage structure of data is the main difference between a blockchain and a normal database. Data are stored in encrypted form inside the block. Each block has key attributes: hash\u200a\u2014\u200awhich uniquely identifies the block, data to be stored in encrypted form, previous block\u2019s hash to chain them together, and metadata (block number and timestamp). If any attempt to alter the data of a blockchain is done, then that would change the hash of the block. And if the hash of one block changes, the hash of the next block is also changed and the hash of every block in the chain will be changed. Eventually, this will destroy the entire blockchain. Thus, the transactions in a blockchain are permanent and irreversible. These types of attempts to tamper with data are not verified by the computers in the network making the stored data\u00a0secure.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1001/1*eyGBp-brSGJO8HfOHEDRAg.png\"></figure><h4>Transaction Process</h4>\n<p>Public Blockchains are decentralised, and the transactions/data are recorded based on a consensus (common agreement) algorithm. Whenever a transaction or a group of transactions is requested, an immediate block representing those transactions is created. Then, the block is verified by nodes using a complex mathematical algorithm, and after verification, the block is added to the main chain, and the change is broadcasted to all the nodes to update the ledger. After the update, the transaction is classified as complete and stored permanently on the blockchain.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*5tJrxBHBGxi-bRk3_NbKRg.jpeg\"></figure><h4>Cryptocurrency Attributes</h4>\n<p>Cryptocurrency is a new type of virtual currency that only exists in code, is secured by cryptography, and functions outside of government systems. Blockchain and cryptocurrency often come together and are sometimes used interchangeably because all the cryptocurrencies use public Blockchain using consensus algorithm to verify payment transactions. But cryptocurrencies are just one of the matured applications of Blockchain and there is more in the Blockchain field. Cryptocurrencies and blockchains have some attributes which make this technology revolutionary.</p>\n<ul>\n<li>No Central Authority: Traditional currencies like US$, and AU$ are controlled by the government and they can manipulate the currency supply to increase or decrease their value. Since cryptocurrency blockchain is decentralised over computers around the world, it cannot be manipulated. Instead, it gives power to people making it a decentralised currency out of the control of a single\u00a0entity.</li>\n<li>Irreversible and Immutable: Completed transactions cannot be reversed back in cryptocurrency as it is permanent. This makes blockchain technology secure.</li>\n<li>Anonymity: Cryptocurrency works with public-key and private-key systems. It is impossible to create a transaction unless a private key is known. Any transaction sent to an address is public. This makes transactions anonymous.</li>\n<li>Supply and Demand: Cryptocurrency supply is pre-fixed and written in code. Any manipulations over the network have to achieve through 51% votes of nodes or some special criteria set out before the launch which is a way of giving freedom to\u00a0people.</li>\n</ul>\n<h4>Decentralisation</h4>\n<p>Private blockchains do exist in which several computers run blockchain networks inside the control of one entity. However, the true potential of blockchain is achieved through public blockchain that is decentralised all over the world and run by computers owned by different individuals and entities. Every node in the network has the record of the public ledger, if one node tries to tamper with the data, then all nodes come together and give their record as a reference to point out that the one who is trying to tamper with the data is wrong. The cross-reference mechanism of blockchain technology is achieved through decentralisation and is equally important to maintain security.</p>\n<h4>Transparency</h4>\n<p>Public Blockchain has to be transparent. Each transaction can be viewed by nodes or blockchain explorers. Anyone with computing powers can be a node to support the network, this feature makes blockchain transparent. Every transaction is live and traceable. However, since it works in public-key and private-key cryptographic systems, privacy is maintained equally. In other words, transactions are public and traceable but irreversible and can be made entirely anonymous depending upon the requirements<em>.</em></p>\n<h4>Blockchain Security</h4>\n<p>Blockchain Technology fulfils the security issues very well. It gets more secure and difficult to hack over time. The blocks are added to the chain chronologically. The hash is created with a complex math function resulting in random strings and numbers. Given a hacker wants to hack the blockchain network: the hacker alters its copy of records, and it would not match with the other many copies in the network. The only copy that does not match with the majority of copies over the network and hence it is rejected. Trust in the system is maintained by a peer-to-peer approach than central entities like banks. To completely hack the network, the hacker would have to tamper with 51% of copies of all networks simultaneously. This is next to impossible as it requires heavy computing powers, money, and resources as it has to change the hash of every block after the block it attacks. This would be a pointless attack. That is why the security is directly proportional to the time and number of blocks added in the\u00a0future.</p>\n<h3>Real-World Blockchain Applications</h3>\n<p>Blockchain has evolved, and it can be applied in many sectors. Major applications are:</p>\n<h4>Banking and\u00a0Finance</h4>\n<p>The most useful and mature application of Blockchain is in the sector of Banking and Finance. Cryptocurrency blockchain makes money transfers and transactions more efficient than current banking systems. Payment takes 2 days sometimes to appear and banks can operate only during business hours. There exist many Decentralised Finance (DeFi) projects working to automate financial services without the traditional concepts of Banks as the central authority. Integrating blockchain technology into banking can increase the transaction speed to as maximum as 10 minutes. Also, the stock exchanges take 2 days to settle shares. The use of blockchain to settle shares would remove the need to freeze the shares for 2 days to a maximum of 10 minutes. Apart, cryptocurrency has special advantages which are promising enough to replace the need to use traditional banking systems including for cross-border transactions.</p>\n<h4>Healthcare</h4>\n<p>Whenever any medical report is generated and finalised, it can be encrypted and stored in a blockchain. This will ensure the patient that their medical record cannot be changed and can be securely accessed using their private key. They may also be able to share that report only if they want to do so, no external entity could violate their privacy. This will generate a sense of confidence in patients for their healthcare providers<em>.</em></p>\n<h4>Smart Contracts</h4>\n<p>Smart Contracts is simply a contract made by using a piece of code that runs on top of a blockchain. Everyday works require some sort of contract and transactions using blockchain are permanent and irreversible. This could raise concern if anyone pays for something and does not get what he/she is supposed to. That is where smart contracts are handy. Say a tenant needs a house to lease and the landlord would give the keys (door code) of the house when he receives a security bond. Using a smart contract would require both parties to send some portions to generate a contract using a smart contract and they are held. The contract would automatically execute if the pre-defined conditions by both parties are met. The smart contract would refund the bond of the tenant given that the landlord does not provide keys (door code) before the lease date. This technology removes the need for third-party to verify contracts instead it is done through codes that are verified by\u00a0nodes.</p>\n<h4>Real Estate</h4>\n<p>Real estate deals involve lots of intermediaries and paper-works. Currently, real estate deals are time-consuming and cumbersome. There also exist many property claims and disputes. The current system is prone to errors and involves inaccuracy. Implementing blockchain in real estate would cut lots of intermediaries as transactions with smart contracts would increase the efficiency in completing deals. Further, owners can also fully trust that their ownership is permanently registered. This would also solve illegal disputes and claims. This application would be fruitful in low-income countries where government infrastructure is not fully developed.</p>\n<h4>Supply Chains</h4>\n<p>Global trades have been prominent, and we have complex supply chains. Blockchain can be applied to supply chains. The origin of foods, materials, and expiry dates can be recorded in a blockchain. This would allow tracking of the safety and path of the foods/materials. Several companies have tried and tested implementing blockchain in supply chains. Walmart tested a pilot project in which it traced pork in China which was produced in the US to check the accuracy and efficiency of the blockchain. UK-based company Provenance raised U$800,000 to implement blockchain to trace food (after pilot-testing Tuna). This indicates Supply Chain Management is adopting blockchain.</p>\n<h4>Digital IDs and\u00a0Voting</h4>\n<p>The recent US election was blamed for being rigged. Similar problems can be seen around the world in an election. Election facilitated by blockchain will be transparent, and confidential, with live counting. This would cut so many processes, personnel, and time. This removes the need for recounts and gives instant results. An election using blockchain has already been tested in 2018 in West Virginia, USA<em>.</em><strong><em> </em></strong>Similarly, cross-border identification is still a problem for many migrants. People travel and migrate around the world but sometimes they have a problem with the authentication of their identity. Blockchain can be used to maintain the digital IDs of civilians and since it will be a permanent record, it will be easier to claim identity anywhere around the world<em>.</em> Many companies steal and sell the users\u2019 data to profit using their central database systems. However, by using blockchain, the identity will be encoded and only accessible with a private key for the user, so blockchain maintains transparency and confidentiality at the same\u00a0time.</p>\n<h3>Pros and Cons of Blockchain</h3>\n<p>Blockchain technology seems promising in many sectors and is already changing the world by applying its technology to cryptocurrency. However, there are still some disadvantages to the blockchain.</p>\n<h4>Pros:</h4>\n<ul>\n<li>Accuracy improvement in record-keeping as it removes human involvement.</li>\n<li>Financially efficient as it removes the need for third-party in any\u00a0sector.</li>\n<li>Can be decentralised which makes it more permanent, secure, and harder to alter\u00a0data.</li>\n<li>Any transactions over the network are confidential, secure, transparent, and efficient.</li>\n<li>Underdeveloped and developing countries can use it to store civilian information cheaply.</li>\n</ul>\n<h4>Cons:</h4>\n<ul>\n<li>Because of its decentralised nature, it can bypass any government restrictions or regulations.</li>\n<li>Criminals use blockchain/cryptocurrency to fund illegal activities maintaining their anonymity.</li>\n<li>If a hacker can get control over 51% of nodes simultaneously then it can be\u00a0hacked.</li>\n<li>If any bug is found in a blockchain network, then it can destroy the whole\u00a0network.</li>\n<li>Anyone can build their network and to support the network it opens some coins/tokens to give rewards to nodes who validate the network. Because of this, many use this technique to scam investors\u2019 money.</li>\n</ul>\n<h3>Blockchain\u2019s Future / My\u00a0Views</h3>\n<p>Blockchain is fairly a new technology that was applied practically just over a decade ago. Many argue it is \u201cInternet 2.0\u201d. This technology has the power to decentralise anything taking the power from central authority be it Governments or Big Banks and transferring it to the general\u00a0people.</p>\n<p>Cryptocurrency projects have proved that blockchain technology can be applied on a high scale. With more years, it is being applied to many sectors. I suppose it will be also applied to record results published on some high-level exams given that it will be permanent and impossible to tamper with. I think the next major application will be in election voting. In years to come, I think we can see some regulatory bodies and governments stepping in to try to regulate this technology given it has some enormous power. Some countries like China and the US are discussing making their national digital currency based on blockchain removing traditional paper currency. Peer-to-peer nature will make money transfer cross-countries with low fees, time, and freedom. Blockchain real and high-scale applications are still not done except in the cryptocurrency industry. Critics question the application of blockchain in many industries, but the relevance of blockchain in the financial world is far from over and it is here to stay. I strongly think even if in the worst-case scenario, we may not be able to apply blockchain in other businesses/industries but applications in the financial world with cryptocurrency may remain\u00a0popular.</p>\n<h3>Conclusion</h3>\n<p>In simple words, Blockchain is a ledger that is distributed over a large network of computers holding similar information in a cell called blocks. All the information is shared between the network and trust for any type of transaction is generated with a consensus mechanism where some computers have to compete to solve complex mathematical equations (proof-of-work) to be able to add blocks in the permanent chain. If some nodes try to change the block\u2019s data, it has to perform some work (proof-of-work) to change the block\u2019s hash and since all blocks are connected to a chain with the hash reference, it has to perform some work on all chains which is generally denied by other\u00a0nodes.</p>\n<p>Blockchain is revolutionary and promising technology set to change the way of deals, and transactions without the need for third-party intermediaries or central authority. Time and again government and big banks have misused their power because the modern financial world is controlled solely by them. Blockchain/Bitcoin was the first to prove that peer-to-peer transactions are possible without the needs of\u00a0banks.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=73c2be3982da\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["cryptocurrency","finance","blockchain","bitcoin","technology"]},{"title":"How to set up a Node.js project with a clean folder structure (TypeScript)","pubDate":"2023-01-29 02:32:01","link":"https://nikitrauniyar.medium.com/how-to-set-up-a-node-js-project-with-a-clean-folder-structure-typescript-5f4f5cdc575e?source=rss-763a5744350b------2","guid":"https://medium.com/p/5f4f5cdc575e","author":"Nikit Rauniyar","thumbnail":"https://cdn-images-1.medium.com/max/1024/1*49bWmkHp_U7cMLEGqqSU5A.jpeg","description":"\n<h4>A step-by-step guide to creating a Node API\u00a0server</h4>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*49bWmkHp_U7cMLEGqqSU5A.jpeg\"><figcaption>(image from datasoft)</figcaption></figure><p>In this step-by-step tutorial, we will learn how to initialize a node project. Node is not a programming language but a run-time environment that enables JavaScript to run on server-side. However, JavaScript is a weakly typed language, and often in large code-base it is difficult to read, understand codes/logics and find\u00a0bugs.</p>\n<p>TypeScript is a super-set of JavaScript which is a strongly typed language. A TypeScript project is written and later transpiles into JavaScript which then can be run by node run-time environment.</p>\n<h4>Prerequisites</h4>\n<ul>\n<li>A basic knowledge of JavaScript/TypeScript</li>\n<li>Postman or similar tool to test\u00a0API</li>\n<li>A basic understanding of MongoDB or any other\u00a0database</li>\n<li>VS Code or any code editor of your\u00a0choice</li>\n<li>Node.js installed on your operating system (<a href=\"https://nodejs.org/en/\">Install\u00a0Node.js</a>)</li>\n</ul>\n<h4>Step 1: Create a folder and initialize with\u00a0npm</h4>\n<p>Open up your terminal, create a folder and move into\u00a0that:</p>\n<pre>mkdir node-tutorial<br>cd node-tutorial</pre>\n<p>After moving into that directory, initialize a project with\u00a0<em>npm:</em></p>\n<pre>npm init -y</pre>\n<p>You can include or exclude the <em>-y</em> flag which means \u201cyes\u201d to all the defaults. Open the folder in VS Code, where you will see a <em>package.json</em> file.</p>\n<p>Create an index.ts file on that directory, which will serve as an entry point for your API server. After this, your folder structure will look like\u00a0this:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*fbfM8j82qWh9NZJkh3UHUA.jpeg\"></figure><h4>Step 2: Install dependencies and create a Typescript-Express server</h4>\n<p>Setup TypeScript compiler:</p>\n<pre>npm install --save-dev typescript ts-node ts-node-dev</pre>\n<blockquote>\n<em>Here, the\u200a</em>\u2014\u200asave-dev<em> flag is used because these packages are only required at the time of development mode. In actual deployment, typescript transpiles into JavaScript, and packages installed with the\u200a</em>\u2014\u200asave-dev<em> can be omitted for performance.</em>\n</blockquote>\n<p>Initialize <em>tsconfig.json</em> file using\u00a0npx:</p>\n<pre>npx tsc --init</pre>\n<blockquote><em>npx\u00a0: An npm package runner\u200a\u2014\u200ahelps to execute packages without installing explicitly.</em></blockquote>\n<p>Now, install <em>express</em> library to create an API server and <em>dotenv</em> to use environment variables:</p>\n<pre>npm install express dotenv</pre>\n<p>Install types for express as a dev dependency:</p>\n<pre>npm install --save-dev @types/express</pre>\n<blockquote>\n<em>Sometimes with many npm packages</em> @types/&lt;package-name&gt; <em>should be installed for type\u00a0support.</em>\n</blockquote>\n<p>Write your server code in index.ts and expose it in port\u00a08000:</p>\n<pre>import express, { Application } from 'express';<br>import 'dotenv/config';<br><br>const app: Application = express();<br><br>const PORT = process.env.PORT || 8000;<br>app.listen(PORT, () =&gt; {<br> console.log(`Server is up and running on port ${PORT}`);<br>});</pre>\n<p>Add a script with <em>dev</em> in your <em>package.json</em> to run your server using <em>ts-node-dev</em>:</p>\n<pre>{<br>  \"name\": \"tutorial\",<br>  \"version\": \"1.0.0\",<br>  \"description\": \"\",<br>  \"main\": \"index.js\",<br>  \"scripts\": {<br>    \"dev\": \"ts-node-dev --respawn index.ts\",<br>    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"<br>  },<br>  \"keywords\": [],<br>  \"author\": \"\",<br>  \"license\": \"ISC\",<br>  \"devDependencies\": {<br>    \"@types/express\": \"^4.17.16\",<br>    \"ts-node\": \"^10.9.1\",<br>    \"ts-node-dev\": \"^2.0.0\",<br>    \"typescript\": \"^4.9.4\"<br>  },<br>  \"dependencies\": {<br>    \"dotenv\": \"^16.0.3\",<br>    \"express\": \"^4.18.2\"<br>  }<br>}</pre>\n<p>Start your\u00a0server:</p>\n<pre>npm run dev</pre>\n<h4>Step 3: Configure ESlint and\u00a0prettier</h4>\n<p>Eslint is a plugin which will help us to identify and report bugs along with making code more consistent. Prettier is another tool that makes code formatting easier across all\u00a0files.</p>\n<pre>npm install --save-dev eslint prettier</pre>\n<p>Initialize ESlint:</p>\n<pre>npm init @eslint/config</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Y4Ms-m9UALj0cZHAIG9s5Q.jpeg\"></figure><p>Create\u00a0<em>.prettierrc.js</em> file on your\u00a0project.</p>\n<pre>module.exports = {<br>    singleQuote: true,<br>    semi: true,<br>    trailingComma: 'none',<br>    printWidth: 120,<br>    tabWidth: 4<br>};</pre>\n<p>Create\u00a0<em>.eslintignore</em> and\u00a0<em>.prettierignore</em> files and put below codes respectively:</p>\n<pre>node_modules<br>coverage<br>cdk.out<br>.eslintrc.js<br>dist</pre>\n<pre>package.json<br>CHANGELOG.md<br>*.yml<br>.versionrc</pre>\n<h4>Step 4: Create directories</h4>\n<p>Create a folder <em>src</em> where we will keep all the source codes including moving <em>index.ts</em> to <em>src</em> with different subfolders:</p>\n<pre>mkdir src<br>cd src<br>mkdir config controllers middlewares models routers utils</pre>\n<p>We will keep files in these sub-folders:</p>\n<ul>\n<li>config: Any configuration files like database connection, external API integration.</li>\n<li>controllers: End functions which deal with database requests and response.</li>\n<li>middlewares: Any middleware functions between router and controllers.</li>\n<li>models: All the schema for database.</li>\n<li>routers: Express router to route based on different end-points.</li>\n<li>utils: Any utility function used in the\u00a0project.</li>\n</ul>\n<blockquote>\n<em>Remember to change </em>dev<em> script in </em>package.json<em> from </em>index.ts<em> to </em>src/index.ts</blockquote>\n<p>After all the changes, your project structure should look like\u00a0this:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*MENuBYDDjPGsBa6aMvJnsg.jpeg\"></figure><h4>Step 5: Configure connection with a\u00a0database</h4>\n<p>Now we will connect to a database. In this case, I will use MongoDB Atlas. You can also use <a href=\"https://account.mongodb.com/account/login\">MongoDB Atlas</a>. To setup MongoDB Atlas, you can follow this tutorial (<a href=\"https://hevodata.com/learn/mongodb-atlas-nodejs/\">https://hevodata.com/learn/mongodb-atlas-nodejs/</a>).</p>\n<p>Install <em>mongoose</em> and create <em>mongodbConnect.ts</em> inside\u00a0<em>config:</em></p>\n<pre>npm install mongoose<br>touch src/config/mongodbConnect.ts</pre>\n<p>Paste this code in you <em>mongodbConnect.ts</em>:</p>\n<pre>import mongoose from 'mongoose';<br>import 'dotenv/config';<br><br>mongoose.set('strictQuery', false);<br><br>const mongodbConnect = async () =&gt; {<br>    try {<br>        await mongoose.connect(process.env.MONGODB_URI as string);<br>        console.log('MongoDB Connected');<br>    } catch (error: any) {<br>        console.log(error.message);<br>    }<br>};<br><br>export default mongodbConnect;</pre>\n<p>Your <em>MONGODB_URI</em> is the connection string that you can get from you MongoDB Atlas account in the web. Put the value in your\u00a0<em>.env</em>\u00a0file.</p>\n<pre>MONGODB_URI=mongodb+srv://&lt;username&gt;:&lt;password&gt;@rbac.m03getg.mongodb.net/?retryWrites=true&amp;w=majority</pre>\n<p>After database connection, you can now create models in MongoDB and use them in your APIs. You should restart your server manually after these with <em>ctrl+c</em> and <em>npm run dev</em> in your terminal window. You should see information like this in your terminal.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*tm4PLQt2ovpCToFnfa4IXw.jpeg\"></figure><h4>Step 6: Create and expose your first\u00a0API</h4>\n<p>Create files in respective directories src/<em>routers/userRouter.ts</em>, src/<em>models/userSchema.ts</em> and src/<em>controllers/userController.ts</em></p>\n<pre>touch src/models/userSchema.ts src/routers/userRouter.ts src/controllers/userController.ts</pre>\n<p>In <em>userSchema.ts</em>:</p>\n<pre>import { Schema, model } from 'mongoose';<br><br>export interface IUser {<br>    firstName: string;<br>    lastName: string;<br>    email: string;<br>    password: string;<br>}<br><br>export const userSchema: Schema&lt;IUser&gt; = new Schema({<br>    firstName: String,<br>    lastName: String,<br>    email: String,<br>    password: String<br>});<br><br>const User = model&lt;IUser&gt;('User', userSchema);<br><br>export default User;</pre>\n<p>In <em>userController.ts</em>:</p>\n<pre>import { Request, Response } from 'express';<br>import User from '../models/userSchema';<br><br>const createUser = async (req: Request, res: Response) =&gt; {<br>    try {<br>        const { firstName, lastName, email, password } = req.body;<br><br>        const newUser = new User({<br>            firstName,<br>            lastName,<br>            email,<br>            password<br>        });<br><br>        const savedUser = await newUser.save();<br><br>        res.status(201).json(savedUser);<br>    } catch (error: any) {<br>        console.log(error.message);<br>        res.status(500).json({ error: error.message });<br>    }<br>};<br><br>const getUser = async (req: Request, res: Response) =&gt; {<br>    try {<br>        const { userId } = req.params;<br>        const user = await User.findOne({ _id: userId });<br><br>        if (!user) {<br>            res.status(404).json({ error: 'User not found' });<br>            return;<br>        }<br><br>        res.status(200).json(user);<br>    } catch (error: any) {<br>        console.log(error.message);<br>        res.status(500).json({ error: error.message });<br>    }<br>};<br><br>export default { createUser, getUser };</pre>\n<p>In <em>userRouter.ts</em>:</p>\n<pre>import express, { Router } from 'express';<br>import userController from '../controllers/userController';<br><br>const userRouter: Router = express.Router();<br><br>// API route: /users/<br>userRouter.post('/', userController.createUser);<br><br>// API route: /users/:userId<br>userRouter.get('/:userId', userController.getUser);<br><br>export default userRouter;</pre>\n<p>Modify your <em>index.ts</em>:</p>\n<pre>import express, { Application } from 'express';<br>import 'dotenv/config';<br>import mongodbConnect from './config/mongodbConnect';<br>import userRouter from './routers/userRouter';<br><br>const app: Application = express();<br><br>// Database Connection<br>mongodbConnect();<br><br>// Middleware Functions<br>app.use(express.json());<br><br>// Routers<br>app.use('/users', userRouter);<br><br>const PORT = process.env.PORT || 8000;<br>app.listen(PORT, () =&gt; {<br>    console.log(`Server is up and running on port ${PORT}`);<br>});</pre>\n<p>Test Your APIs using\u00a0Postman:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*kZWheV2qLsst8DsikgD4DA.jpeg\"><figcaption>API: Create a\u00a0User</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*ssoJPy2J_MYI4NNQMz3DTg.jpeg\"><figcaption>API: Get a\u00a0User</figcaption></figure><h4>Conclusion</h4>\n<p>You have successfully built an API server with Node-TypeScript. Obviously, there are a lot of things to do such as, global error handling, data validation middleware, storing passwords in hash, authentication &amp; authorization and a lot more. However, this tutorial was mainly focused on setting up minimal Node-TypeScript API server with database connection, clean folder structure, eslint, prettier, and separating controllers, middlewares, and\u00a0routers.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=5f4f5cdc575e\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<h4>A step-by-step guide to creating a Node API\u00a0server</h4>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*49bWmkHp_U7cMLEGqqSU5A.jpeg\"><figcaption>(image from datasoft)</figcaption></figure><p>In this step-by-step tutorial, we will learn how to initialize a node project. Node is not a programming language but a run-time environment that enables JavaScript to run on server-side. However, JavaScript is a weakly typed language, and often in large code-base it is difficult to read, understand codes/logics and find\u00a0bugs.</p>\n<p>TypeScript is a super-set of JavaScript which is a strongly typed language. A TypeScript project is written and later transpiles into JavaScript which then can be run by node run-time environment.</p>\n<h4>Prerequisites</h4>\n<ul>\n<li>A basic knowledge of JavaScript/TypeScript</li>\n<li>Postman or similar tool to test\u00a0API</li>\n<li>A basic understanding of MongoDB or any other\u00a0database</li>\n<li>VS Code or any code editor of your\u00a0choice</li>\n<li>Node.js installed on your operating system (<a href=\"https://nodejs.org/en/\">Install\u00a0Node.js</a>)</li>\n</ul>\n<h4>Step 1: Create a folder and initialize with\u00a0npm</h4>\n<p>Open up your terminal, create a folder and move into\u00a0that:</p>\n<pre>mkdir node-tutorial<br>cd node-tutorial</pre>\n<p>After moving into that directory, initialize a project with\u00a0<em>npm:</em></p>\n<pre>npm init -y</pre>\n<p>You can include or exclude the <em>-y</em> flag which means \u201cyes\u201d to all the defaults. Open the folder in VS Code, where you will see a <em>package.json</em> file.</p>\n<p>Create an index.ts file on that directory, which will serve as an entry point for your API server. After this, your folder structure will look like\u00a0this:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*fbfM8j82qWh9NZJkh3UHUA.jpeg\"></figure><h4>Step 2: Install dependencies and create a Typescript-Express server</h4>\n<p>Setup TypeScript compiler:</p>\n<pre>npm install --save-dev typescript ts-node ts-node-dev</pre>\n<blockquote>\n<em>Here, the\u200a</em>\u2014\u200asave-dev<em> flag is used because these packages are only required at the time of development mode. In actual deployment, typescript transpiles into JavaScript, and packages installed with the\u200a</em>\u2014\u200asave-dev<em> can be omitted for performance.</em>\n</blockquote>\n<p>Initialize <em>tsconfig.json</em> file using\u00a0npx:</p>\n<pre>npx tsc --init</pre>\n<blockquote><em>npx\u00a0: An npm package runner\u200a\u2014\u200ahelps to execute packages without installing explicitly.</em></blockquote>\n<p>Now, install <em>express</em> library to create an API server and <em>dotenv</em> to use environment variables:</p>\n<pre>npm install express dotenv</pre>\n<p>Install types for express as a dev dependency:</p>\n<pre>npm install --save-dev @types/express</pre>\n<blockquote>\n<em>Sometimes with many npm packages</em> @types/&lt;package-name&gt; <em>should be installed for type\u00a0support.</em>\n</blockquote>\n<p>Write your server code in index.ts and expose it in port\u00a08000:</p>\n<pre>import express, { Application } from 'express';<br>import 'dotenv/config';<br><br>const app: Application = express();<br><br>const PORT = process.env.PORT || 8000;<br>app.listen(PORT, () =&gt; {<br> console.log(`Server is up and running on port ${PORT}`);<br>});</pre>\n<p>Add a script with <em>dev</em> in your <em>package.json</em> to run your server using <em>ts-node-dev</em>:</p>\n<pre>{<br>  \"name\": \"tutorial\",<br>  \"version\": \"1.0.0\",<br>  \"description\": \"\",<br>  \"main\": \"index.js\",<br>  \"scripts\": {<br>    \"dev\": \"ts-node-dev --respawn index.ts\",<br>    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"<br>  },<br>  \"keywords\": [],<br>  \"author\": \"\",<br>  \"license\": \"ISC\",<br>  \"devDependencies\": {<br>    \"@types/express\": \"^4.17.16\",<br>    \"ts-node\": \"^10.9.1\",<br>    \"ts-node-dev\": \"^2.0.0\",<br>    \"typescript\": \"^4.9.4\"<br>  },<br>  \"dependencies\": {<br>    \"dotenv\": \"^16.0.3\",<br>    \"express\": \"^4.18.2\"<br>  }<br>}</pre>\n<p>Start your\u00a0server:</p>\n<pre>npm run dev</pre>\n<h4>Step 3: Configure ESlint and\u00a0prettier</h4>\n<p>Eslint is a plugin which will help us to identify and report bugs along with making code more consistent. Prettier is another tool that makes code formatting easier across all\u00a0files.</p>\n<pre>npm install --save-dev eslint prettier</pre>\n<p>Initialize ESlint:</p>\n<pre>npm init @eslint/config</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Y4Ms-m9UALj0cZHAIG9s5Q.jpeg\"></figure><p>Create\u00a0<em>.prettierrc.js</em> file on your\u00a0project.</p>\n<pre>module.exports = {<br>    singleQuote: true,<br>    semi: true,<br>    trailingComma: 'none',<br>    printWidth: 120,<br>    tabWidth: 4<br>};</pre>\n<p>Create\u00a0<em>.eslintignore</em> and\u00a0<em>.prettierignore</em> files and put below codes respectively:</p>\n<pre>node_modules<br>coverage<br>cdk.out<br>.eslintrc.js<br>dist</pre>\n<pre>package.json<br>CHANGELOG.md<br>*.yml<br>.versionrc</pre>\n<h4>Step 4: Create directories</h4>\n<p>Create a folder <em>src</em> where we will keep all the source codes including moving <em>index.ts</em> to <em>src</em> with different subfolders:</p>\n<pre>mkdir src<br>cd src<br>mkdir config controllers middlewares models routers utils</pre>\n<p>We will keep files in these sub-folders:</p>\n<ul>\n<li>config: Any configuration files like database connection, external API integration.</li>\n<li>controllers: End functions which deal with database requests and response.</li>\n<li>middlewares: Any middleware functions between router and controllers.</li>\n<li>models: All the schema for database.</li>\n<li>routers: Express router to route based on different end-points.</li>\n<li>utils: Any utility function used in the\u00a0project.</li>\n</ul>\n<blockquote>\n<em>Remember to change </em>dev<em> script in </em>package.json<em> from </em>index.ts<em> to </em>src/index.ts</blockquote>\n<p>After all the changes, your project structure should look like\u00a0this:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*MENuBYDDjPGsBa6aMvJnsg.jpeg\"></figure><h4>Step 5: Configure connection with a\u00a0database</h4>\n<p>Now we will connect to a database. In this case, I will use MongoDB Atlas. You can also use <a href=\"https://account.mongodb.com/account/login\">MongoDB Atlas</a>. To setup MongoDB Atlas, you can follow this tutorial (<a href=\"https://hevodata.com/learn/mongodb-atlas-nodejs/\">https://hevodata.com/learn/mongodb-atlas-nodejs/</a>).</p>\n<p>Install <em>mongoose</em> and create <em>mongodbConnect.ts</em> inside\u00a0<em>config:</em></p>\n<pre>npm install mongoose<br>touch src/config/mongodbConnect.ts</pre>\n<p>Paste this code in you <em>mongodbConnect.ts</em>:</p>\n<pre>import mongoose from 'mongoose';<br>import 'dotenv/config';<br><br>mongoose.set('strictQuery', false);<br><br>const mongodbConnect = async () =&gt; {<br>    try {<br>        await mongoose.connect(process.env.MONGODB_URI as string);<br>        console.log('MongoDB Connected');<br>    } catch (error: any) {<br>        console.log(error.message);<br>    }<br>};<br><br>export default mongodbConnect;</pre>\n<p>Your <em>MONGODB_URI</em> is the connection string that you can get from you MongoDB Atlas account in the web. Put the value in your\u00a0<em>.env</em>\u00a0file.</p>\n<pre>MONGODB_URI=mongodb+srv://&lt;username&gt;:&lt;password&gt;@rbac.m03getg.mongodb.net/?retryWrites=true&amp;w=majority</pre>\n<p>After database connection, you can now create models in MongoDB and use them in your APIs. You should restart your server manually after these with <em>ctrl+c</em> and <em>npm run dev</em> in your terminal window. You should see information like this in your terminal.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*tm4PLQt2ovpCToFnfa4IXw.jpeg\"></figure><h4>Step 6: Create and expose your first\u00a0API</h4>\n<p>Create files in respective directories src/<em>routers/userRouter.ts</em>, src/<em>models/userSchema.ts</em> and src/<em>controllers/userController.ts</em></p>\n<pre>touch src/models/userSchema.ts src/routers/userRouter.ts src/controllers/userController.ts</pre>\n<p>In <em>userSchema.ts</em>:</p>\n<pre>import { Schema, model } from 'mongoose';<br><br>export interface IUser {<br>    firstName: string;<br>    lastName: string;<br>    email: string;<br>    password: string;<br>}<br><br>export const userSchema: Schema&lt;IUser&gt; = new Schema({<br>    firstName: String,<br>    lastName: String,<br>    email: String,<br>    password: String<br>});<br><br>const User = model&lt;IUser&gt;('User', userSchema);<br><br>export default User;</pre>\n<p>In <em>userController.ts</em>:</p>\n<pre>import { Request, Response } from 'express';<br>import User from '../models/userSchema';<br><br>const createUser = async (req: Request, res: Response) =&gt; {<br>    try {<br>        const { firstName, lastName, email, password } = req.body;<br><br>        const newUser = new User({<br>            firstName,<br>            lastName,<br>            email,<br>            password<br>        });<br><br>        const savedUser = await newUser.save();<br><br>        res.status(201).json(savedUser);<br>    } catch (error: any) {<br>        console.log(error.message);<br>        res.status(500).json({ error: error.message });<br>    }<br>};<br><br>const getUser = async (req: Request, res: Response) =&gt; {<br>    try {<br>        const { userId } = req.params;<br>        const user = await User.findOne({ _id: userId });<br><br>        if (!user) {<br>            res.status(404).json({ error: 'User not found' });<br>            return;<br>        }<br><br>        res.status(200).json(user);<br>    } catch (error: any) {<br>        console.log(error.message);<br>        res.status(500).json({ error: error.message });<br>    }<br>};<br><br>export default { createUser, getUser };</pre>\n<p>In <em>userRouter.ts</em>:</p>\n<pre>import express, { Router } from 'express';<br>import userController from '../controllers/userController';<br><br>const userRouter: Router = express.Router();<br><br>// API route: /users/<br>userRouter.post('/', userController.createUser);<br><br>// API route: /users/:userId<br>userRouter.get('/:userId', userController.getUser);<br><br>export default userRouter;</pre>\n<p>Modify your <em>index.ts</em>:</p>\n<pre>import express, { Application } from 'express';<br>import 'dotenv/config';<br>import mongodbConnect from './config/mongodbConnect';<br>import userRouter from './routers/userRouter';<br><br>const app: Application = express();<br><br>// Database Connection<br>mongodbConnect();<br><br>// Middleware Functions<br>app.use(express.json());<br><br>// Routers<br>app.use('/users', userRouter);<br><br>const PORT = process.env.PORT || 8000;<br>app.listen(PORT, () =&gt; {<br>    console.log(`Server is up and running on port ${PORT}`);<br>});</pre>\n<p>Test Your APIs using\u00a0Postman:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*kZWheV2qLsst8DsikgD4DA.jpeg\"><figcaption>API: Create a\u00a0User</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*ssoJPy2J_MYI4NNQMz3DTg.jpeg\"><figcaption>API: Get a\u00a0User</figcaption></figure><h4>Conclusion</h4>\n<p>You have successfully built an API server with Node-TypeScript. Obviously, there are a lot of things to do such as, global error handling, data validation middleware, storing passwords in hash, authentication &amp; authorization and a lot more. However, this tutorial was mainly focused on setting up minimal Node-TypeScript API server with database connection, clean folder structure, eslint, prettier, and separating controllers, middlewares, and\u00a0routers.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=5f4f5cdc575e\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["api","mongodb","typescript","expressjs","nodejs"]}]}